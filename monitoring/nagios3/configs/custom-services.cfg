; Check uptime
define service {
	use			generic-service
	service_description	Switch uptime
	check_interval		5
	check_command		check_snmp_cisco!1.3.6.1.2.1.1.3.0
	hostgroup	cisco-switches,tplink-switches
}

; define SNMP TRAP BASE service
define service {
	name SNMP_TRAP
	service_description SNMP_TRAP
	active_checks_enabled           1       ; Active service checks are enabled
	passive_checks_enabled          1       ; Passive service checks are enabled/accepted
	parallelize_check               1       ; Active service checks should be parallelized
	process_perf_data               0
	obsess_over_service             0       ; We should obsess over this service (if necessary)
	check_freshness                 0       ; Default is to NOT check service 'freshness'
	notifications_enabled           1       ; Service notifications are enabled
	event_handler_enabled           1       ; Service event handler is enabled
	flap_detection_enabled          1       ; Flap detection is enabled
	process_perf_data               1       ; Process performance data
	retain_status_information       1       ; Retain status information across program restarts
	retain_nonstatus_information    1       ; Retain non-status information across program restarts
	check_command                   check-host-alive      ; This will be used to reset the service to "OK"
	is_volatile                     1
	check_period                    24x7
	max_check_attempts              1
	normal_check_interval           1
	retry_check_interval            1
	notification_interval           120
	notification_period             24x7
	notification_options            w,u,c,r
	contact_groups                  ofnoc       ; Modify this to match your Nagios contact group definitions
	register
}

; TRAP itself
define service {
	use SNMP_TRAP
	hostgroup_name cisco-switches,tplink-switches
	service_description TRAP
	check_interval 120
	flap_detection_enabled	0
}

; Cisco Switches CPU Avg (5 min)
define service {
	use                     generic-service
	hostgroup               cisco-switches
	service_description     5 Min CPU Average
	check_interval          5
	check_command           check_snmp_cisco!.1.3.6.1.4.1.9.9.109.1.1.1.1.8.1!-l \"5 Minute CPU \% \" -w 50 -c 80
}

; 1 min
define service {
	use                     generic-service
	hostgroup               cisco-switches
	service_description     1 Min CPU Average
	check_interval          1
	check_command           check_snmp_cisco!.1.3.6.1.4.1.9.9.109.1.1.1.1.7.1!-l \"1 Minute CPU \% \" -w 50 -c 80
}

; Stream counter
define service {
	use	generic-service
	host_name	eric
	service_description	Stream Count
	check_command	check_stream_count!5!3
}

; check individual streams
; Bulgaria-HD
define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria HD stream / ERIC
	check_command		check_rtmp!rtmp://127.0.0.1/st/bulgaria-hd
	max_check_attempts	1
}

define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria HD stream / MARLA
	check_command		check_rtmp!rtmp://79.98.105.21/st/bulgaria-hd
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria HD stream / HAWK
	check_command		check_rtmp!rtmp://79.124.31.206/st/bulgaria-hd
}

; Bulgaria-normal
define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria stream / ERIC
	check_command		check_rtmp!rtmp://127.0.0.1/st/bulgaria
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria stream / MARLA
	check_command		check_rtmp!rtmp://79.98.105.21/st/bulgaria
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	Bulgaria stream / HAWK
	check_command		check_rtmp!rtmp://79.124.31.206/st/bulgaria
	max_check_attempts	1
}

; Chamber
define service {
	use			generic-service
	host_name		eric
	service_description	CHAMBER stream / ERIC
	check_command		check_rtmp!rtmp://127.0.0.1/st/chamber
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	CHAMBER stream / MARLA
	check_command		check_rtmp!rtmp://79.98.105.21/st/chamber
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	CHAMBER stream / HAWK
	check_command		check_rtmp!rtmp://79.124.31.206/st/chamber
	max_check_attempts	1
}

; zala muzika (third)
define service {
	use			generic-service
	host_name		eric
	service_description	MUSIC stream / ERIC
	check_command		check_rtmp!rtmp://127.0.0.1/st/music
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	MUSIC stream / MARLA
	check_command		check_rtmp!rtmp://79.98.105.21/st/music
	max_check_attempts	1
}
define service {
	use			generic-service
	host_name		eric
	service_description	MUSIC stream / HAWK
	check_command		check_rtmp!rtmp://79.124.31.206/st/music
	max_check_attempts	1
}

; check ap load via collectd
define service{
	use			generic-service
	service_description	Load
	check_command		check_collectd!load/load!0.5!0.7
	hostgroup		ap-group
}

; check telnet available on switches
define service{
	use			generic-service
	service_description	Telnet
	check_command		check_telnet_4!
	hostgroup		core-switches
}
